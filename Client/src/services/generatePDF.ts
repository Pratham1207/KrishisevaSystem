import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface SoilData {
  humidity: number;
  temperature: number;
  moisture: number;
  timestamp: string;
}

interface User {
  name: string;
  email: string;
}

export const generatePDF = (user: User, soilData: SoilData[]) => {
  const doc = new jsPDF();
  const dateGenerated = new Date().toLocaleString();

  const avg = (values: number[]) =>
    values.length
      ? (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)
      : "N/A";

  const formatTemp = (temp: number) => `${temp}°C`;

  const humidityValues = soilData.map((d) => d.humidity);
  const temperatureValues = soilData.map((d) => d.temperature);
  const moistureValues = soilData.map((d) => d.moisture);

  const avgHumidity = avg(humidityValues);
  const avgMoisture = avg(moistureValues);
  const minTemp = Math.min(...temperatureValues);
  const maxTemp = Math.max(...temperatureValues);
  const latest = soilData[0];

  // Header
  doc.setFontSize(18);
  doc.text("Soil Health Monitoring Report", 105, 20, { align: "center" });

  doc.setFontSize(12);
  doc.text(`User: ${user.name}`, 15, 30);
  doc.text(`Email: ${user.email}`, 15, 36);
  doc.text(`Date: ${dateGenerated}`, 15, 42);

  // Summary
  doc.setFontSize(14);
  doc.text("Overall Summary", 15, 55);

  doc.setFontSize(12);
  doc.text(`Avg Humidity (24hr): ${avgHumidity}%`, 15, 63);
  doc.text(`Temperature Range: ${minTemp}°C - ${maxTemp}°C`, 15, 70);
  doc.text(`Avg Moisture: ${avgMoisture} / 1024`, 15, 77);
  //   doc.text("Moisture is optimal for lettuce farming.", 15, 77);

  // Latest Snapshot Table
  doc.setFontSize(14);
  doc.text("Latest Records", 15, 90);

  autoTable(doc, {
    startY: 95,
    head: [["Parameter", "Value"]],
    body: [
      ["Humidity", `${latest.humidity}%`],
      ["Temperature", formatTemp(latest.temperature)],
      ["Moisture", `${latest.moisture} / 1024`],
    ],
    theme: "grid",
    headStyles: { fillColor: [22, 123, 181] },
    styles: { fontSize: 11 },
  });

  // Raw Data Records
  doc.addPage();
  doc.setFontSize(14);
  doc.text("All Data Records", 15, 20);

  const rawData = soilData.map((d) => [
    new Date(d.timestamp).toLocaleString(),
    `${d.humidity}%`,
    formatTemp(d.temperature),
    d.moisture.toString(),
  ]);

  autoTable(doc, {
    startY: 25,
    head: [["Timestamp", "Humidity", "Temperature", "Moisture"]],
    body: rawData,
    theme: "grid",
    headStyles: { fillColor: [22, 123, 181] },
    styles: { fontSize: 10 },
  });

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setTextColor(100);
    doc.text(
      "This report was generated by KrishiSeva Monitoring Platform",
      15,
      290
    );
    doc.text(`Page ${i} of ${pageCount}`, 180, 290);
  }

  doc.save("soil-report.pdf");
};
